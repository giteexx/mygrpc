// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: code.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetBalance(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*BalanceReply, error)
	UsePhone(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*PhoneReply, error)
	GetPhone(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*PhoneReply, error)
	GetCode(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*CodeReply, error)
	CodeFeed(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	PhoneFeed(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	Rrelease(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*EmptyReply, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetBalance(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*BalanceReply, error) {
	out := new(BalanceReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UsePhone(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*PhoneReply, error) {
	out := new(PhoneReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/UsePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPhone(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*PhoneReply, error) {
	out := new(PhoneReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/GetPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCode(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*CodeReply, error) {
	out := new(CodeReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CodeFeed(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/CodeFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PhoneFeed(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/PhoneFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Rrelease(ctx context.Context, in *WayRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/api.Gateway/Rrelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetBalance(context.Context, *WayRequest) (*BalanceReply, error)
	UsePhone(context.Context, *WayRequest) (*PhoneReply, error)
	GetPhone(context.Context, *WayRequest) (*PhoneReply, error)
	GetCode(context.Context, *WayRequest) (*CodeReply, error)
	CodeFeed(context.Context, *WayRequest) (*EmptyReply, error)
	PhoneFeed(context.Context, *WayRequest) (*EmptyReply, error)
	Rrelease(context.Context, *WayRequest) (*EmptyReply, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetBalance(context.Context, *WayRequest) (*BalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedGatewayServer) UsePhone(context.Context, *WayRequest) (*PhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePhone not implemented")
}
func (UnimplementedGatewayServer) GetPhone(context.Context, *WayRequest) (*PhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhone not implemented")
}
func (UnimplementedGatewayServer) GetCode(context.Context, *WayRequest) (*CodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCode not implemented")
}
func (UnimplementedGatewayServer) CodeFeed(context.Context, *WayRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodeFeed not implemented")
}
func (UnimplementedGatewayServer) PhoneFeed(context.Context, *WayRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneFeed not implemented")
}
func (UnimplementedGatewayServer) Rrelease(context.Context, *WayRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rrelease not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetBalance(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UsePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UsePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/UsePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UsePhone(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPhone(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCode(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CodeFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CodeFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/CodeFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CodeFeed(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PhoneFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PhoneFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/PhoneFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PhoneFeed(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Rrelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Rrelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Gateway/Rrelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Rrelease(ctx, req.(*WayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Gateway_GetBalance_Handler,
		},
		{
			MethodName: "UsePhone",
			Handler:    _Gateway_UsePhone_Handler,
		},
		{
			MethodName: "GetPhone",
			Handler:    _Gateway_GetPhone_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _Gateway_GetCode_Handler,
		},
		{
			MethodName: "CodeFeed",
			Handler:    _Gateway_CodeFeed_Handler,
		},
		{
			MethodName: "PhoneFeed",
			Handler:    _Gateway_PhoneFeed_Handler,
		},
		{
			MethodName: "Rrelease",
			Handler:    _Gateway_Rrelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "code.proto",
}
